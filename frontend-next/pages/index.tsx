import React from 'react'
import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { ethers } from 'ethers';
import {tokenAddress, tokenABI, factoryAddress, factoryABI, erc20ABI} from "./contracts_abi"
import TopBar from "../components/TopBar"
import { FaEthereum } from "react-icons/fa";

declare let window: any

export default class Home extends React.Component {
  state = {
    currentAccount: null,
    network: {
      avalancheFuji: {
          chainId: `0x${Number(43113).toString(16)}`,
          chainName: "Avalanche Fuji Testnet",
          nativeCurrency: {
              name: "AVAX",
              symbol: "AVAX",
              decimals: 18
          },
          rpcUrls: ["https://api.avax-test.network/ext/bc/C/rpc"],
          blockExplorerUrls: ["https://testnet.snowtrace.io/"]
      }
    },

    tokens: ["BTC", "LINK"],
    tvls: [],
    apys_calls: [[]],
    apys_puts: [[]],
    manyOptions: [0],


  }

  componentDidMount = () => {
    this.getHowManyOptions()
    this.getTVL()
    this.getAPYs_calls()
    this.getAPYs_puts()
  }
  getHowManyOptions = async () => {
    const { ethereum } = window;
    if (ethereum) {
      
      const provider = new ethers.providers.Web3Provider(ethereum);
      const signer = provider.getSigner();

      const factoryContract = new ethers.Contract(factoryAddress, factoryABI, signer);

      for(let i = 0; i<this.state.tokens.length;i++){
        await factoryContract.getHowManyOptions(tokenAddress[i]).then((result:any) => {
          this.setState({manyOptions:ethers.utils.formatEther(result)})
        })
      }      

    }else{
      console.log("Ethereum object does not exist");
    }
  }
  getTVL = async () => {
    const { ethereum } = window;
    if (ethereum) {
      
      const provider = new ethers.providers.Web3Provider(ethereum);
      const signer = provider.getSigner();

      let tvls:any = []
      
      const factoryContract = new ethers.Contract(factoryAddress, factoryABI, signer);
      for(let k = 0; k < this.state.tokens.length; k++){
        await factoryContract.getTVL(tokenAddress[k]).then((result:any ) =>{
          tvls.push(ethers.utils.formatEther(result).slice(0,2))
        })
      }
      


      this.setState({tvls:tvls});

    }else{
      console.log("Ethereum object does not exist");
    }
  }
  getAPYs_calls = async () => {
    const { ethereum } = window;
    if (ethereum) {
      
      const provider = new ethers.providers.Web3Provider(ethereum);
      const signer = provider.getSigner();

      let apys:any = [[]]

      const factoryContract = new ethers.Contract(factoryAddress, factoryABI, signer);
      for(let k = 0; k < this.state.tokens.length; k++){
        for(let i = 0; i<=this.state.manyOptions[k]; i++){
          //console.log(tokenAddress[k])
          await factoryContract.getOptionApy(tokenAddress[k],i).then((result:any ) =>{
            //console.log("shit "+result.toString())
            apys[k].push(result.toString())
          })
        }
      }

      this.setState({apys_calls:apys});

    }else{
      console.log("Ethereum object does not exist");
    }
  }
  getAPYs_puts = async () => {
    const { ethereum } = window;
    if (ethereum) {
      
      const provider = new ethers.providers.Web3Provider(ethereum);
      const signer = provider.getSigner();

      let apys:any = [[]]

      const factoryContract = new ethers.Contract(factoryAddress, factoryABI, signer);
      for(let k = 0; k < this.state.tokens.length; k++){
        for(let i = 0; i<=this.state.manyOptions[k]; i++){
          await factoryContract.getAntiOptionApy(tokenAddress[k],i).then((result:any ) =>{
            apys[k].push(result.toString())
          })
        }
      }

      this.setState({apys_puts:apys});

    }else{
      console.log("Ethereum object does not exist");
    }
  }

  render(): React.ReactNode {
    return (
      <div className={styles.container}>

        <Head>
          <title>Loan & Options DApp</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        
        <main className={styles.main}>

          <TopBar></TopBar>
          <div className={styles.grid}>
            {/* CALLS */}
            {this.state.tokens.map( (item,i) => {
              return(
                <a className={styles.card} key={i}>
                  <h2>{item}
                    <span className=" bg-green-100 text-green-800 text-xs font-semibold ml-24 px-2.5 py-0.5 rounded dark:bg-green-200 dark:text-green-900">CALLS</span>  
                  </h2>
                  <ul className='ml-5 flex flex-wrap font-medium text-center text-gray-500'>
                    <li className='mr-2'>
                      <a className="inline-block p-4 text-blue-600 bg-gray-100 rounded-md active dark:bg-gray-800 dark:text-blue-500">
                        TVL: {this.state.tvls[i]}/<FaEthereum className='inline'/>
                      </a>
                    </li>
                    <li className="mr-2">
                        <a className="inline-block p-4 text-blue-600 bg-gray-100 rounded-md active dark:bg-gray-800 dark:text-blue-500">APY: {this.state.apys_calls[i]}%</a>
                    </li>
                  </ul>
                  {/*<p className={styles.epoch}>Epoch: {this.state.strikesDeadline[i]}</p>*/}
                  <button className='ml-4 mt-5 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800'>
                    <a href={"/Calls/"+item}>Manage</a>
                  </button>
                  <a type="button" href={"/Loans/Calls/"+item} className="ml-7 py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">Get a Loan</a>
                </a>
              )
            } )}
          </div>
          {/* PUTS */}
          <div className={styles.grid} >
            {this.state.tokens.map( (item,i) => {
              return(
                <a className={styles.card} key={i}>
                  <h2>{item}
                    <span className=" bg-red-100 text-red-800 text-xs font-semibold ml-24 px-2.5 py-0.5 rounded dark:bg-red-200 dark:text-red-900">PUTS</span>  
                  </h2>
                  <ul className='inline-block ml-5 flex flex-wrap font-medium text-center text-gray-500'>
                    <li className='mr-2'>
                      <a className="inline-block p-4 text-blue-600 bg-gray-100 rounded-md active dark:bg-gray-800 dark:text-blue-500">
                        TVL:{this.state.tvls[i]}<FaEthereum className='inline'/>
                      </a>
                    </li>
                    <li className="mr-2">
                        <a className="inline-block p-4 text-blue-600 bg-gray-100 rounded-md active dark:bg-gray-800 dark:text-blue-500">APY:{this.state.apys_puts}%</a>
                    </li>
                  </ul>
                  {/*<p className={styles.epoch}>Epoch: {this.state.strikesDeadline[i]}</p>*/}
                  <button className='ml-5 mt-5 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 focus:outline-none dark:focus:ring-blue-800'>
                    <a href={"/Puts/"+item}>Manage</a>
                  </button>
                  <a type="button" href={"/Loans/Puts/"+item} className="ml-7 py-2.5 px-5 mr-2 mb-2 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700">Get a Loan</a>
                </a>
              )
            } )}
          </div>

        </main>
  
      </div>
    )
  }
  
}
